// transform registry into typescript declarations
const {
	readLatin1String, heap32VectorToArray, 
	typeIdToTypeName, typeNamesToParameters
} = require('./embind.js')
const {
	getClassExternalDeclaration, getClassModuleDeclaration
} = require('./declarations/classes.js')


const getFunctionDeclaration = (module,registry,hint) => funcInfo => {
	const {name,argCount,rawArgTypesAddr} = funcInfo;
	// TODO
	const nameStr = readLatin1String(module)(name)
	const argTypes = heap32VectorToArray(module)(argCount, rawArgTypesAddr);
	const argTypeNames = argTypes.map(typeIdToTypeName(module,registry))
	const [returnType,...parameterTypes] = argTypeNames;
	const parameters = typeNamesToParameters(parameterTypes)
	const preComment = hint({name:nameStr}).comment
	return `${preComment}\n\t${nameStr}(${parameters}): ${returnType};`
}

// identical
const getEnumInterfaceDeclaration = (module,registry) => enumInfo => {
	const {getName,values} = enumInfo;
	const name = getName(module)
	return `\t${name}: ${name}Enum`
}

const getEnumValueDeclaration = (module,registry,enumName) => valInfo => {
	const {name,enumValue} = valInfo;
	const humanName = readLatin1String(module)(name)
	return `\t${humanName}: ${enumName},`
}

const getEnumDeclaration = (module,registry) => enumInfo => {
	const {getName,values} = enumInfo;
	const name = getName(module)
	return [
		`declare const valid${name}: unique symbol;`,
		`export interface ${name} {[valid${name}]: true}`,
		`interface ${name}Enum {`,
		...enumInfo.values.map(
			getEnumValueDeclaration(module,registry,name)),
		'}'
	].join('\n')
}


// TS is not responsible for enforcing number sizes (int8 vs int32 etc)
const declarationForNumber = (module,registry) => name => {
	return `type ${name(module)} = number;`
}

const indent = text => `\t${text}`

const getModuleDeclaration = (module,registry,hint) => {
	return [
		"export interface CustomEmbindModule {",
		...registry.functions
			.map(getFunctionDeclaration(module,registry,hint))
			.map(indent),
		...Object.values(registry.classes)
			.map(getClassModuleDeclaration(module,registry))
			.map(indent),
		...Object.values(registry.enums)
			.map(getEnumInterfaceDeclaration(module,registry)),
		"}",
		"declare function factory(): Promise<CustomEmbindModule>;",
		"export default factory;"
	].join('\n')
}

const declarationsForRegistry = (module,registry,hint) => {
	return [
		[ '// generated by TSEMBIND ', '' ],
		[ '// define type aliases for various native number types' ],
		registry.numbers.map(declarationForNumber(module,registry)),
		[ '' ],
		Object.values(registry.classes)
			.map(getClassExternalDeclaration(module,registry)),
		Object.values(registry.enums)
			.map(getEnumDeclaration(module,registry)),
		[getModuleDeclaration(module,registry,hint)]
	].flat().join('\n')
}

module.exports = {declarationsForRegistry}
